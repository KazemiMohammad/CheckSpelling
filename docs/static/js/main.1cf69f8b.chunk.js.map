{"version":3,"sources":["components/CollectInput.tsx","components/LoadingSpinner.tsx","components/ShowCorrected.tsx","components/SpellingFixer.tsx","App.tsx","index.tsx"],"names":["CollectInput","submitHandler","useState","text","setText","className","onSubmit","e","preventDefault","onChange","target","value","onKeyPress","key","shiftKey","type","LoadingSpinner","Array","map","_","i","ShowCorrected","SpellingFixer","apiPath","corpus","corrected","setCorrected","url","useEffect","checkString","a","axios","post","checkspelling","then","response","data","misspellings","length","correctionRequests","generateCorrectionRequestPromises","all","correctionResult","applyCorrections","incorrectString","corrections","newString","sort","b","start","forEach","correction","substring","end","miss","index","missString","push","createCorrectionRequest","word","get","params","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAkCeA,EA7BM,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,cACtB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAcA,OACE,uBACEC,UAAU,qBACVC,SARqB,SAACC,GACxBA,EAAEC,iBACFP,EAAcE,IAId,UAIE,0BACEM,SAAU,SAAAF,GAAC,OAAIH,EAAQG,EAAEG,OAAOC,QAChCC,WAnByB,SAACL,GAChB,UAAVA,EAAEM,KAAmBN,EAAEO,WACzBP,EAAEC,iBACFP,EAAcE,OAkBd,uBAAOY,KAAK,SAASJ,MAAM,yB,uDClBlBK,G,MARQ,kBACrB,qBAAKX,UAAU,0BAAf,SACG,YAAIY,MAAM,IAAIC,KAAI,SAACC,EAAGC,GAAJ,OACjB,qBAAaf,UAAU,iBAAbe,UCGDC,G,MAJO,SAAC,GAAD,IAAElB,EAAF,EAAEA,KAAF,OACpB,qBAAKE,UAAU,iBAAf,SAAiCF,MCgGpBmB,EA/FO,SAAC,GAAuB,IAKvCC,EALkBC,EAAoB,EAApBA,OACvB,EAAkCtB,mBAAwB,MAA1D,mBAAOuB,EAAP,KAAkBC,EAAlB,KAEMC,EAAM,mCAH+B,SAKtCJ,KALsC,wBAKtCA,EALsC,0BAKtCA,EALsC,+BAKtCA,MALsC,KAW3CK,qBAAU,WACRC,MAEC,CAACL,IAEJ,IAAMK,EAAW,uCAAG,sBAAAC,EAAA,6DAClBJ,EAAa,MADK,SAEZK,IACHC,KAAKL,EAAMJ,EAAQU,cAAe,CACjCT,WAEDU,KAJG,+BAAAJ,EAAA,MAIE,WAAgBK,GAAhB,iBAAAL,EAAA,0DACAK,EAASC,KAAKC,aAAaC,OAD3B,sBAE8B,GAGhCC,EAAqBC,EACnBL,EAASC,KAAKC,cANd,SAQuBN,IAAMU,IAAIF,GARjC,QAQFG,EARE,SAUkBC,EAAiBnB,EAAQkB,GAV3C,uBAYFhB,EAAaF,GAZX,4CAJF,uDAFY,2CAAH,qDAuBXmB,EAAmB,SAACC,EAAyBC,GACjD,IAAIC,EAAoBF,EAExBC,EACGE,MAAK,SAACjB,EAAQkB,GACb,OAAOA,EAAEC,MAAQnB,EAAEmB,SAEpBC,SAAQ,SAACC,GACRL,EACEA,EAAUM,UAAU,EAAGD,EAAWF,OAClCE,EAAWN,YAAY,GACvBC,EAAUM,UAAUD,EAAWE,QAGrC3B,EAAaoB,IAGTN,EAAyC,SAACH,GAC9C,IAAIE,EAA4B,GAQhC,OAPAF,EAAaa,SAAQ,SAACI,EAAWC,GAC/B,IAAIC,EAAqBhC,EAAO4B,UAAUE,EAAKL,MAAOK,EAAKD,KAE3Dd,EAAmBkB,KACjBC,EAAwBF,EAAYF,EAAKL,MAAOK,EAAKD,SAGlDd,GAGHmB,EAA+B,SACnCC,EACAV,EACAI,GAEA,OAAOtB,IACJ6B,IAAIjC,EAAMJ,EAAQsB,YAAa,CAC9BgB,OAAQ,CACNF,UAGHzB,MAAK,SAACC,GACL,OAAO,2BAAKA,EAASC,MAArB,IAA2Ba,QAAOI,YAIxC,OACE,mCACiB,OAAd5B,EACC,cAAC,EAAD,IAEA,cAAC,EAAD,CAAetB,KAAMsB,OCjFdqC,EAVH,WACV,MAAwB5D,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAcJ,cAAeG,IAC5BD,GAAQ,cAAC,EAAD,CAAeqB,OAAQrB,QCLtC4D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1cf69f8b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./CollectInput.scss\";\r\n\r\ntype Props = { submitHandler: (string:string) => void };\r\n\r\nconst CollectInput = ({ submitHandler }: Props) => {\r\n  const [text, setText] = useState(\"\");\r\n  \r\n  const handleTextAreaKeyPress = (e:any) => {\r\n    if (e.key === \"Enter\" && e.shiftKey) {\r\n      e.preventDefault();\r\n      submitHandler(text);\r\n    }\r\n  };\r\n  \r\n  const handleFormSubmit = (e:any) => {\r\n    e.preventDefault();\r\n    submitHandler(text);\r\n  };\r\n  \r\n  return (\r\n    <form \r\n      className=\"collect-input-form\"\r\n      onSubmit={handleFormSubmit}\r\n    >\r\n      <textarea \r\n        onChange={e => setText(e.target.value)}\r\n        onKeyPress={handleTextAreaKeyPress}\r\n      ></textarea>\r\n      <input type=\"submit\" value=\"Correct Spelling\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CollectInput;","import React from \"react\";\r\nimport \"./LoadingSpinner.scss\";\r\n\r\nconst LoadingSpinner = () =>\r\n  <div className=\"loading-block-container\">\r\n    {[...Array(3)].map((_, i) =>\r\n      <div key={i} className=\"loading-block\"></div>\r\n    )}\r\n  </div>\r\n;\r\n\r\nexport default LoadingSpinner;","import React from \"react\";\r\nimport \"./ShowCorrected.scss\";\r\n\r\ntype Props = {text: string};\r\n\r\nconst ShowCorrected = ({text}: Props) => \r\n  <div className=\"corrected-text\">{text}</div>\r\n;\r\n\r\nexport default ShowCorrected;","import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport ShowCorrected from \"./ShowCorrected\";\r\n\r\ntype Props = { corpus: string };\r\n\r\nconst SpellingFixer = ({ corpus }: Props) => {\r\n  const [corrected, setCorrected] = useState<string | null>(null);\r\n\r\n  const url = \"https://spellchecker.glitch.me/\";\r\n\r\n  enum apiPath {\r\n    misspelled = \"misspelled\",\r\n    corrections = \"corrections\",\r\n    checkspelling = \"checkspelling\",\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkString();\r\n    // eslint-disable-next-line\r\n  }, [corpus]);\r\n\r\n  const checkString = async () => {\r\n    setCorrected(null);\r\n    await axios\r\n      .post(url + apiPath.checkspelling, {\r\n        corpus,\r\n      })\r\n      .then(async function (response) {\r\n        if (response.data.misspellings.length) {\r\n          let correctionRequests: any[] = [];\r\n          let correctionResult: any[];\r\n\r\n          correctionRequests = generateCorrectionRequestPromises(\r\n            response.data.misspellings\r\n          );\r\n          correctionResult = await axios.all(correctionRequests);\r\n\r\n          correctionResult && applyCorrections(corpus, correctionResult);\r\n        } else {\r\n          setCorrected(corpus);\r\n        }\r\n      });\r\n  };\r\n\r\n  const applyCorrections = (incorrectString: string, corrections: any[]) => {\r\n    let newString: string = incorrectString;\r\n\r\n    corrections\r\n      .sort((a: any, b: any) => {\r\n        return b.start - a.start;\r\n      })\r\n      .forEach((correction: any) => {\r\n        newString =\r\n          newString.substring(0, correction.start) +\r\n          correction.corrections[0] +\r\n          newString.substring(correction.end);\r\n      });\r\n\r\n    setCorrected(newString);\r\n  };\r\n\r\n  const generateCorrectionRequestPromises: any = (misspellings: any[]) => {\r\n    let correctionRequests: any[] = [];\r\n    misspellings.forEach((miss: any, index: number) => {\r\n      let missString: string = corpus.substring(miss.start, miss.end);\r\n\r\n      correctionRequests.push(\r\n        createCorrectionRequest(missString, miss.start, miss.end)\r\n      );\r\n    });\r\n    return correctionRequests;\r\n  };\r\n\r\n  const createCorrectionRequest: any = (\r\n    word: string,\r\n    start: number,\r\n    end: number\r\n  ) => {\r\n    return axios\r\n      .get(url + apiPath.corrections, {\r\n        params: {\r\n          word,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        return { ...response.data, start, end };\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {corrected === null ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <ShowCorrected text={corrected} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpellingFixer;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport CollectInput from \"./components/CollectInput\";\r\nimport SpellingFixer from \"./components/SpellingFixer\";\r\n\r\nconst App = () => {\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <div className=\"App\">\r\n      <CollectInput submitHandler={setText} />\r\n      {text && <SpellingFixer corpus={text} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}